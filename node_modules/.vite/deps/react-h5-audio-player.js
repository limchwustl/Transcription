import {
  _extends,
  _setPrototypeOf
} from "./chunk-BZ3J2XGS.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/@iconify/icons-mdi/play-circle.js
var require_play_circle = __commonJS({
  "node_modules/@iconify/icons-mdi/play-circle.js"(exports) {
    var data = {
      "body": '<path d="M10 16.5v-9l6 4.5M12 2A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/pause-circle.js
var require_pause_circle = __commonJS({
  "node_modules/@iconify/icons-mdi/pause-circle.js"(exports) {
    var data = {
      "body": '<path d="M15 16h-2V8h2m-4 8H9V8h2m1-6A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/skip-previous.js
var require_skip_previous = __commonJS({
  "node_modules/@iconify/icons-mdi/skip-previous.js"(exports) {
    var data = {
      "body": '<path d="M6 18V6h2v12H6m3.5-6L18 6v12l-8.5-6z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/skip-next.js
var require_skip_next = __commonJS({
  "node_modules/@iconify/icons-mdi/skip-next.js"(exports) {
    var data = {
      "body": '<path d="M16 18h2V6h-2M6 18l8.5-6L6 6v12z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/fast-forward.js
var require_fast_forward = __commonJS({
  "node_modules/@iconify/icons-mdi/fast-forward.js"(exports) {
    var data = {
      "body": '<path d="M13 6v12l8.5-6M4 18l8.5-6L4 6v12z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/rewind.js
var require_rewind = __commonJS({
  "node_modules/@iconify/icons-mdi/rewind.js"(exports) {
    var data = {
      "body": '<path d="M11.5 12l8.5 6V6m-9 12V6l-8.5 6l8.5 6z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/volume-high.js
var require_volume_high = __commonJS({
  "node_modules/@iconify/icons-mdi/volume-high.js"(exports) {
    var data = {
      "body": '<path d="M14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.84-5 6.7v2.07c4-.91 7-4.49 7-8.77c0-4.28-3-7.86-7-8.77M16.5 12c0-1.77-1-3.29-2.5-4.03V16c1.5-.71 2.5-2.24 2.5-4M3 9v6h4l5 5V4L7 9H3z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/volume-mute.js
var require_volume_mute = __commonJS({
  "node_modules/@iconify/icons-mdi/volume-mute.js"(exports) {
    var data = {
      "body": '<path d="M3 9h4l5-5v16l-5-5H3V9m13.59 3L14 9.41L15.41 8L18 10.59L20.59 8L22 9.41L19.41 12L22 14.59L20.59 16L18 13.41L15.41 16L14 14.59L16.59 12z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/repeat.js
var require_repeat = __commonJS({
  "node_modules/@iconify/icons-mdi/repeat.js"(exports) {
    var data = {
      "body": '<path d="M17 17H7v-3l-4 4l4 4v-3h12v-6h-2M7 7h10v3l4-4l-4-4v3H5v6h2V7z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@iconify/icons-mdi/repeat-off.js
var require_repeat_off = __commonJS({
  "node_modules/@iconify/icons-mdi/repeat-off.js"(exports) {
    var data = {
      "body": '<path d="M2 5.27L3.28 4L20 20.72L18.73 22l-3-3H7v3l-4-4l4-4v3h6.73L7 10.27V11H5V8.27l-3-3M17 13h2v4.18l-2-2V13m0-8V2l4 4l-4 4V7H8.82l-2-2H17z" fill="currentColor"/>',
      "width": 24,
      "height": 24
    };
    exports.__esModule = true;
    exports.default = data;
  }
});

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/react-h5-audio-player/es/index.js
var import_react6 = __toESM(require_react());

// node_modules/@iconify/react/dist/iconify.mjs
var import_react = __toESM(require_react(), 1);
var matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
var iconDefaults = Object.freeze({
  left: 0,
  top: 0,
  width: 16,
  height: 16,
  rotate: 0,
  vFlip: false,
  hFlip: false
});
function fullIcon(data) {
  return { ...iconDefaults, ...data };
}
var stringToIcon = (value, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name2 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name2
    };
    return validate && !validateIcon(result) ? null : result;
  }
  const name = colonSeparated[0];
  const dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIcon(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name
    };
    return validate && !validateIcon(result, allowSimpleName) ? null : result;
  }
  return null;
};
var validateIcon = (icon, allowSimpleName) => {
  if (!icon) {
    return false;
  }
  return !!((icon.provider === "" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchName)) && icon.name.match(matchName));
};
function mergeIconData(icon, alias) {
  const result = { ...icon };
  for (const key in iconDefaults) {
    const prop = key;
    if (alias[prop] !== void 0) {
      const value = alias[prop];
      if (result[prop] === void 0) {
        result[prop] = value;
        continue;
      }
      switch (prop) {
        case "rotate":
          result[prop] = (result[prop] + value) % 4;
          break;
        case "hFlip":
        case "vFlip":
          result[prop] = value !== result[prop];
          break;
        default:
          result[prop] = value;
      }
    }
  }
  return result;
}
function getIconData$1(data, name, full = false) {
  function getIcon(name2, iteration) {
    if (data.icons[name2] !== void 0) {
      return Object.assign({}, data.icons[name2]);
    }
    if (iteration > 5) {
      return null;
    }
    const aliases = data.aliases;
    if (aliases && aliases[name2] !== void 0) {
      const item = aliases[name2];
      const result2 = getIcon(item.parent, iteration + 1);
      if (result2) {
        return mergeIconData(result2, item);
      }
      return result2;
    }
    const chars = data.chars;
    if (!iteration && chars && chars[name2] !== void 0) {
      return getIcon(chars[name2], iteration + 1);
    }
    return null;
  }
  const result = getIcon(name, 0);
  if (result) {
    for (const key in iconDefaults) {
      if (result[key] === void 0 && data[key] !== void 0) {
        result[key] = data[key];
      }
    }
  }
  return result && full ? fullIcon(result) : result;
}
function isVariation(item) {
  for (const key in iconDefaults) {
    if (item[key] !== void 0) {
      return true;
    }
  }
  return false;
}
function parseIconSet(data, callback, options) {
  options = options || {};
  const names = [];
  if (typeof data !== "object" || typeof data.icons !== "object") {
    return names;
  }
  if (data.not_found instanceof Array) {
    data.not_found.forEach((name) => {
      callback(name, null);
      names.push(name);
    });
  }
  const icons = data.icons;
  Object.keys(icons).forEach((name) => {
    const iconData = getIconData$1(data, name, true);
    if (iconData) {
      callback(name, iconData);
      names.push(name);
    }
  });
  const parseAliases = options.aliases || "all";
  if (parseAliases !== "none" && typeof data.aliases === "object") {
    const aliases = data.aliases;
    Object.keys(aliases).forEach((name) => {
      if (parseAliases === "variations" && isVariation(aliases[name])) {
        return;
      }
      const iconData = getIconData$1(data, name, true);
      if (iconData) {
        callback(name, iconData);
        names.push(name);
      }
    });
  }
  return names;
}
var optionalProperties = {
  provider: "string",
  aliases: "object",
  not_found: "object"
};
for (const prop in iconDefaults) {
  optionalProperties[prop] = typeof iconDefaults[prop];
}
function quicklyValidateIconSet(obj) {
  if (typeof obj !== "object" || obj === null) {
    return null;
  }
  const data = obj;
  if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
    return null;
  }
  for (const prop in optionalProperties) {
    if (obj[prop] !== void 0 && typeof obj[prop] !== optionalProperties[prop]) {
      return null;
    }
  }
  const icons = data.icons;
  for (const name in icons) {
    const icon = icons[name];
    if (!name.match(matchName) || typeof icon.body !== "string") {
      return null;
    }
    for (const prop in iconDefaults) {
      if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
        return null;
      }
    }
  }
  const aliases = data.aliases;
  if (aliases) {
    for (const name in aliases) {
      const icon = aliases[name];
      const parent = icon.parent;
      if (!name.match(matchName) || typeof parent !== "string" || !icons[parent] && !aliases[parent]) {
        return null;
      }
      for (const prop in iconDefaults) {
        if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
          return null;
        }
      }
    }
  }
  return data;
}
var storageVersion = 1;
var storage$1 = /* @__PURE__ */ Object.create(null);
try {
  const w = window || self;
  if (w && w._iconifyStorage.version === storageVersion) {
    storage$1 = w._iconifyStorage.storage;
  }
} catch (err) {
}
function newStorage(provider, prefix) {
  return {
    provider,
    prefix,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ Object.create(null)
  };
}
function getStorage(provider, prefix) {
  if (storage$1[provider] === void 0) {
    storage$1[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerStorage = storage$1[provider];
  if (providerStorage[prefix] === void 0) {
    providerStorage[prefix] = newStorage(provider, prefix);
  }
  return providerStorage[prefix];
}
function addIconSet(storage2, data) {
  if (!quicklyValidateIconSet(data)) {
    return [];
  }
  const t = Date.now();
  return parseIconSet(data, (name, icon) => {
    if (icon) {
      storage2.icons[name] = icon;
    } else {
      storage2.missing[name] = t;
    }
  });
}
function addIconToStorage(storage2, name, icon) {
  try {
    if (typeof icon.body === "string") {
      storage2.icons[name] = Object.freeze(fullIcon(icon));
      return true;
    }
  } catch (err) {
  }
  return false;
}
function getIconFromStorage(storage2, name) {
  const value = storage2.icons[name];
  return value === void 0 ? null : value;
}
var simpleNames = false;
function allowSimpleNames(allow) {
  if (typeof allow === "boolean") {
    simpleNames = allow;
  }
  return simpleNames;
}
function getIconData(name) {
  const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
  return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;
}
function addIcon(name, data) {
  const icon = stringToIcon(name, true, simpleNames);
  if (!icon) {
    return false;
  }
  const storage2 = getStorage(icon.provider, icon.prefix);
  return addIconToStorage(storage2, icon.name, data);
}
function addCollection(data, provider) {
  if (typeof data !== "object") {
    return false;
  }
  if (typeof provider !== "string") {
    provider = typeof data.provider === "string" ? data.provider : "";
  }
  if (simpleNames && provider === "" && (typeof data.prefix !== "string" || data.prefix === "")) {
    let added = false;
    if (quicklyValidateIconSet(data)) {
      data.prefix = "";
      parseIconSet(data, (name, icon) => {
        if (icon && addIcon(name, icon)) {
          added = true;
        }
      });
    }
    return added;
  }
  if (typeof data.prefix !== "string" || !validateIcon({
    provider,
    prefix: data.prefix,
    name: "a"
  })) {
    return false;
  }
  const storage2 = getStorage(provider, data.prefix);
  return !!addIconSet(storage2, data);
}
var defaults = Object.freeze({
  inline: false,
  width: null,
  height: null,
  hAlign: "center",
  vAlign: "middle",
  slice: false,
  hFlip: false,
  vFlip: false,
  rotate: 0
});
function mergeCustomisations(defaults2, item) {
  const result = {};
  for (const key in defaults2) {
    const attr = key;
    result[attr] = defaults2[attr];
    if (item[attr] === void 0) {
      continue;
    }
    const value = item[attr];
    switch (attr) {
      case "inline":
      case "slice":
        if (typeof value === "boolean") {
          result[attr] = value;
        }
        break;
      case "hFlip":
      case "vFlip":
        if (value === true) {
          result[attr] = !result[attr];
        }
        break;
      case "hAlign":
      case "vAlign":
        if (typeof value === "string" && value !== "") {
          result[attr] = value;
        }
        break;
      case "width":
      case "height":
        if (typeof value === "string" && value !== "" || typeof value === "number" && value || value === null) {
          result[attr] = value;
        }
        break;
      case "rotate":
        if (typeof value === "number") {
          result[attr] += value;
        }
        break;
    }
  }
  return result;
}
var unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
var unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
  if (ratio === 1) {
    return size;
  }
  precision = precision === void 0 ? 100 : precision;
  if (typeof size === "number") {
    return Math.ceil(size * ratio * precision) / precision;
  }
  if (typeof size !== "string") {
    return size;
  }
  const oldParts = size.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size;
  }
  const newParts = [];
  let code = oldParts.shift();
  let isNumber = unitsTest.test(code);
  while (true) {
    if (isNumber) {
      const num = parseFloat(code);
      if (isNaN(num)) {
        newParts.push(code);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code);
    }
    code = oldParts.shift();
    if (code === void 0) {
      return newParts.join("");
    }
    isNumber = !isNumber;
  }
}
function preserveAspectRatio(props) {
  let result = "";
  switch (props.hAlign) {
    case "left":
      result += "xMin";
      break;
    case "right":
      result += "xMax";
      break;
    default:
      result += "xMid";
  }
  switch (props.vAlign) {
    case "top":
      result += "YMin";
      break;
    case "bottom":
      result += "YMax";
      break;
    default:
      result += "YMid";
  }
  result += props.slice ? " slice" : " meet";
  return result;
}
function iconToSVG(icon, customisations) {
  const box = {
    left: icon.left,
    top: icon.top,
    width: icon.width,
    height: icon.height
  };
  let body = icon.body;
  [icon, customisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")");
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")");
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
      case 2:
        transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== 0 || box.top !== 0) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>";
    }
  });
  let width, height;
  if (customisations.width === null && customisations.height === null) {
    height = "1em";
    width = calculateSize(height, box.width / box.height);
  } else if (customisations.width !== null && customisations.height !== null) {
    width = customisations.width;
    height = customisations.height;
  } else if (customisations.height !== null) {
    height = customisations.height;
    width = calculateSize(height, box.width / box.height);
  } else {
    width = customisations.width;
    height = calculateSize(width, box.height / box.width);
  }
  if (width === "auto") {
    width = box.width;
  }
  if (height === "auto") {
    height = box.height;
  }
  width = typeof width === "string" ? width : width.toString() + "";
  height = typeof height === "string" ? height : height.toString() + "";
  const result = {
    attributes: {
      width,
      height,
      preserveAspectRatio: preserveAspectRatio(customisations),
      viewBox: box.left.toString() + " " + box.top.toString() + " " + box.width.toString() + " " + box.height.toString()
    },
    body
  };
  if (customisations.inline) {
    result.inline = true;
  }
  return result;
}
var regex = /\sid="(\S+)"/g;
var randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
var counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
  const ids = [];
  let match;
  while (match = regex.exec(body)) {
    ids.push(match[1]);
  }
  if (!ids.length) {
    return body;
  }
  ids.forEach((id) => {
    const newID = typeof prefix === "function" ? prefix(id) : prefix + (counter++).toString();
    const escapedID = id.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + "$3");
  });
  return body;
}
var storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources === "string") {
    resources = [source.resources];
  } else {
    resources = source.resources;
    if (!(resources instanceof Array) || !resources.length) {
      return null;
    }
  }
  const result = {
    resources,
    path: source.path === void 0 ? "/" : source.path,
    maxURL: source.maxURL ? source.maxURL : 500,
    rotate: source.rotate ? source.rotate : 750,
    timeout: source.timeout ? source.timeout : 5e3,
    random: source.random === true,
    index: source.index ? source.index : 0,
    dataAfterTimeout: source.dataAfterTimeout !== false
  };
  return result;
}
var configStorage = /* @__PURE__ */ Object.create(null);
var fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
var fallBackAPI = [];
while (fallBackAPISources.length > 0) {
  if (fallBackAPISources.length === 1) {
    fallBackAPI.push(fallBackAPISources.shift());
  } else {
    if (Math.random() > 0.5) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      fallBackAPI.push(fallBackAPISources.pop());
    }
  }
}
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  const config2 = createAPIConfig(customConfig);
  if (config2 === null) {
    return false;
  }
  configStorage[provider] = config2;
  return true;
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
var mergeParams = (base, params) => {
  let result = base, hasParams = result.indexOf("?") !== -1;
  function paramToString(value) {
    switch (typeof value) {
      case "boolean":
        return value ? "true" : "false";
      case "number":
        return encodeURIComponent(value);
      case "string":
        return encodeURIComponent(value);
      default:
        throw new Error("Invalid parameter");
    }
  }
  Object.keys(params).forEach((key) => {
    let value;
    try {
      value = paramToString(params[key]);
    } catch (err) {
      return;
    }
    result += (hasParams ? "&" : "?") + encodeURIComponent(key) + "=" + value;
    hasParams = true;
  });
  return result;
};
var maxLengthCache = {};
var pathCache = {};
var detectFetch = () => {
  let callback;
  try {
    callback = fetch;
    if (typeof callback === "function") {
      return callback;
    }
  } catch (err) {
  }
  return null;
};
var fetchModule = detectFetch();
function calculateMaxLength(provider, prefix) {
  const config2 = getAPIConfig(provider);
  if (!config2) {
    return 0;
  }
  let result;
  if (!config2.maxURL) {
    result = 0;
  } else {
    let maxHostLength = 0;
    config2.resources.forEach((item) => {
      const host = item;
      maxHostLength = Math.max(maxHostLength, host.length);
    });
    const url = mergeParams(prefix + ".json", {
      icons: ""
    });
    result = config2.maxURL - maxHostLength - config2.path.length - url.length;
  }
  const cacheKey = provider + ":" + prefix;
  pathCache[provider] = config2.path;
  maxLengthCache[cacheKey] = result;
  return result;
}
function shouldAbort(status) {
  return status === 404;
}
var prepare = (provider, prefix, icons) => {
  const results = [];
  let maxLength = maxLengthCache[prefix];
  if (maxLength === void 0) {
    maxLength = calculateMaxLength(provider, prefix);
  }
  const type = "icons";
  let item = {
    type,
    provider,
    prefix,
    icons: []
  };
  let length = 0;
  icons.forEach((name, index) => {
    length += name.length + 1;
    if (length >= maxLength && index > 0) {
      results.push(item);
      item = {
        type,
        provider,
        prefix,
        icons: []
      };
      length = name.length;
    }
    item.icons.push(name);
  });
  results.push(item);
  return results;
};
function getPath(provider) {
  if (typeof provider === "string") {
    if (pathCache[provider] === void 0) {
      const config2 = getAPIConfig(provider);
      if (!config2) {
        return "/";
      }
      pathCache[provider] = config2.path;
    }
    return pathCache[provider];
  }
  return "/";
}
var send = (host, params, callback) => {
  if (!fetchModule) {
    callback("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      const prefix = params.prefix;
      const icons = params.icons;
      const iconsList = icons.join(",");
      path += mergeParams(prefix + ".json", {
        icons: iconsList
      });
      break;
    }
    case "custom": {
      const uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    const status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    defaultError = 501;
    return response.json();
  }).then((data) => {
    if (typeof data !== "object" || data === null) {
      setTimeout(() => {
        callback("next", defaultError);
      });
      return;
    }
    setTimeout(() => {
      callback("success", data);
    });
  }).catch(() => {
    callback("next", defaultError);
  });
};
var fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  const result = {
    loaded: [],
    missing: [],
    pending: []
  };
  const storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a, b) => {
    if (a.provider !== b.provider) {
      return a.provider.localeCompare(b.provider);
    }
    if (a.prefix !== b.prefix) {
      return a.prefix.localeCompare(b.prefix);
    }
    return a.name.localeCompare(b.name);
  });
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  icons.forEach((icon) => {
    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
      return;
    }
    lastIcon = icon;
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    if (storage2[provider] === void 0) {
      storage2[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerStorage = storage2[provider];
    if (providerStorage[prefix] === void 0) {
      providerStorage[prefix] = getStorage(provider, prefix);
    }
    const localStorage = providerStorage[prefix];
    let list;
    if (localStorage.icons[name] !== void 0) {
      list = result.loaded;
    } else if (prefix === "" || localStorage.missing[name] !== void 0) {
      list = result.missing;
    } else {
      list = result.pending;
    }
    const item = {
      provider,
      prefix,
      name
    };
    list.push(item);
  });
  return result;
}
var callbacks = /* @__PURE__ */ Object.create(null);
var pendingUpdates = /* @__PURE__ */ Object.create(null);
function removeCallback(sources, id) {
  sources.forEach((source) => {
    const provider = source.provider;
    if (callbacks[provider] === void 0) {
      return;
    }
    const providerCallbacks = callbacks[provider];
    const prefix = source.prefix;
    const items = providerCallbacks[prefix];
    if (items) {
      providerCallbacks[prefix] = items.filter((row) => row.id !== id);
    }
  });
}
function updateCallbacks(provider, prefix) {
  if (pendingUpdates[provider] === void 0) {
    pendingUpdates[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingUpdates = pendingUpdates[provider];
  if (!providerPendingUpdates[prefix]) {
    providerPendingUpdates[prefix] = true;
    setTimeout(() => {
      providerPendingUpdates[prefix] = false;
      if (callbacks[provider] === void 0 || callbacks[provider][prefix] === void 0) {
        return;
      }
      const items = callbacks[provider][prefix].slice(0);
      if (!items.length) {
        return;
      }
      const storage2 = getStorage(provider, prefix);
      let hasPending = false;
      items.forEach((item) => {
        const icons = item.icons;
        const oldLength = icons.pending.length;
        icons.pending = icons.pending.filter((icon) => {
          if (icon.prefix !== prefix) {
            return true;
          }
          const name = icon.name;
          if (storage2.icons[name] !== void 0) {
            icons.loaded.push({
              provider,
              prefix,
              name
            });
          } else if (storage2.missing[name] !== void 0) {
            icons.missing.push({
              provider,
              prefix,
              name
            });
          } else {
            hasPending = true;
            return true;
          }
          return false;
        });
        if (icons.pending.length !== oldLength) {
          if (!hasPending) {
            removeCallback([
              {
                provider,
                prefix
              }
            ], item.id);
          }
          item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);
        }
      });
    });
  }
}
var idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
  const id = idCounter++;
  const abort = removeCallback.bind(null, pendingSources, id);
  if (!icons.pending.length) {
    return abort;
  }
  const item = {
    id,
    icons,
    callback,
    abort
  };
  pendingSources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (callbacks[provider] === void 0) {
      callbacks[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerCallbacks = callbacks[provider];
    if (providerCallbacks[prefix] === void 0) {
      providerCallbacks[prefix] = [];
    }
    providerCallbacks[prefix].push(item);
  });
  return abort;
}
function listToIcons(list, validate = true, simpleNames2 = false) {
  const result = [];
  list.forEach((item) => {
    const icon = typeof item === "string" ? stringToIcon(item, false, simpleNames2) : item;
    if (!validate || validateIcon(icon, simpleNames2)) {
      result.push({
        provider: icon.provider,
        prefix: icon.prefix,
        name: icon.name
      });
    }
  });
  return result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function sendQuery(config2, payload, query, done) {
  const resourcesCount = config2.resources.length;
  const startIndex = config2.random ? Math.floor(Math.random() * resourcesCount) : config2.index;
  let resources;
  if (config2.random) {
    let list = config2.resources.slice(0);
    resources = [];
    while (list.length > 1) {
      const nextIndex = Math.floor(Math.random() * list.length);
      resources.push(list[nextIndex]);
      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
    }
    resources = resources.concat(list);
  } else {
    resources = config2.resources.slice(startIndex).concat(config2.resources.slice(0, startIndex));
  }
  const startTime = Date.now();
  let status = "pending";
  let queriesSent = 0;
  let lastError;
  let timer = null;
  let queue = [];
  let doneCallbacks = [];
  if (typeof done === "function") {
    doneCallbacks.push(done);
  }
  function resetTimer() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function abort() {
    if (status === "pending") {
      status = "aborted";
    }
    resetTimer();
    queue.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue = [];
  }
  function subscribe(callback, overwrite) {
    if (overwrite) {
      doneCallbacks = [];
    }
    if (typeof callback === "function") {
      doneCallbacks.push(callback);
    }
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed";
    doneCallbacks.forEach((callback) => {
      callback(void 0, lastError);
    });
  }
  function clearQueue() {
    queue.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue = [];
  }
  function moduleResponse(item, response, data) {
    const isError = response !== "success";
    queue = queue.filter((queued) => queued !== item);
    switch (status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config2.dataAfterTimeout) {
          return;
        }
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data;
      failQuery();
      return;
    }
    if (isError) {
      lastError = data;
      if (!queue.length) {
        if (!resources.length) {
          failQuery();
        } else {
          execNext();
        }
      }
      return;
    }
    resetTimer();
    clearQueue();
    if (!config2.random) {
      const index = config2.resources.indexOf(item.resource);
      if (index !== -1 && index !== config2.index) {
        config2.index = index;
      }
    }
    status = "completed";
    doneCallbacks.forEach((callback) => {
      callback(data);
    });
  }
  function execNext() {
    if (status !== "pending") {
      return;
    }
    resetTimer();
    const resource = resources.shift();
    if (resource === void 0) {
      if (queue.length) {
        timer = setTimeout(() => {
          resetTimer();
          if (status === "pending") {
            clearQueue();
            failQuery();
          }
        }, config2.timeout);
        return;
      }
      failQuery();
      return;
    }
    const item = {
      status: "pending",
      resource,
      callback: (status2, data) => {
        moduleResponse(item, status2, data);
      }
    };
    queue.push(item);
    queriesSent++;
    timer = setTimeout(execNext, config2.rotate);
    query(resource, payload, item.callback);
  }
  setTimeout(execNext);
  return getQueryStatus;
}
function setConfig(config2) {
  if (typeof config2 !== "object" || typeof config2.resources !== "object" || !(config2.resources instanceof Array) || !config2.resources.length) {
    throw new Error("Invalid Reduncancy configuration");
  }
  const newConfig = /* @__PURE__ */ Object.create(null);
  let key;
  for (key in defaultConfig) {
    if (config2[key] !== void 0) {
      newConfig[key] = config2[key];
    } else {
      newConfig[key] = defaultConfig[key];
    }
  }
  return newConfig;
}
function initRedundancy(cfg) {
  const config2 = setConfig(cfg);
  let queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    const query2 = sendQuery(config2, payload, queryCallback, (data, error) => {
      cleanup();
      if (doneCallback) {
        doneCallback(data, error);
      }
    });
    queries.push(query2);
    return query2;
  }
  function find(callback) {
    const result = queries.find((value) => {
      return callback(value);
    });
    return result !== void 0 ? result : null;
  }
  const instance = {
    query,
    find,
    setIndex: (index) => {
      config2.index = index;
    },
    getIndex: () => config2.index,
    cleanup
  };
  return instance;
}
function emptyCallback$1() {
}
var redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (redundancyCache[provider] === void 0) {
    const config2 = getAPIConfig(provider);
    if (!config2) {
      return;
    }
    const redundancy = initRedundancy(config2);
    const cachedReundancy = {
      config: config2,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
  let redundancy;
  let send2;
  if (typeof target === "string") {
    const api = getAPIModule(target);
    if (!api) {
      callback(void 0, 424);
      return emptyCallback$1;
    }
    send2 = api.send;
    const cached = getRedundancyCache(target);
    if (cached) {
      redundancy = cached.redundancy;
    }
  } else {
    const config2 = createAPIConfig(target);
    if (config2) {
      redundancy = initRedundancy(config2);
      const moduleKey = target.resources ? target.resources[0] : "";
      const api = getAPIModule(moduleKey);
      if (api) {
        send2 = api.send;
      }
    }
  }
  if (!redundancy || !send2) {
    callback(void 0, 424);
    return emptyCallback$1;
  }
  return redundancy.query(query, send2, callback)().abort;
}
var cache = {};
function emptyCallback() {
}
var pendingIcons = /* @__PURE__ */ Object.create(null);
var iconsToLoad = /* @__PURE__ */ Object.create(null);
var loaderFlags = /* @__PURE__ */ Object.create(null);
var queueFlags = /* @__PURE__ */ Object.create(null);
function loadedNewIcons(provider, prefix) {
  if (loaderFlags[provider] === void 0) {
    loaderFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerLoaderFlags = loaderFlags[provider];
  if (!providerLoaderFlags[prefix]) {
    providerLoaderFlags[prefix] = true;
    setTimeout(() => {
      providerLoaderFlags[prefix] = false;
      updateCallbacks(provider, prefix);
    });
  }
}
var errorsCache = /* @__PURE__ */ Object.create(null);
function loadNewIcons(provider, prefix, icons) {
  function err() {
    const key = (provider === "" ? "" : "@" + provider + ":") + prefix;
    const time = Math.floor(Date.now() / 6e4);
    if (errorsCache[key] < time) {
      errorsCache[key] = time;
      console.error('Unable to retrieve icons for "' + key + '" because API is not configured properly.');
    }
  }
  if (iconsToLoad[provider] === void 0) {
    iconsToLoad[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerIconsToLoad = iconsToLoad[provider];
  if (queueFlags[provider] === void 0) {
    queueFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerQueueFlags = queueFlags[provider];
  if (pendingIcons[provider] === void 0) {
    pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingIcons = pendingIcons[provider];
  if (providerIconsToLoad[prefix] === void 0) {
    providerIconsToLoad[prefix] = icons;
  } else {
    providerIconsToLoad[prefix] = providerIconsToLoad[prefix].concat(icons).sort();
  }
  if (!providerQueueFlags[prefix]) {
    providerQueueFlags[prefix] = true;
    setTimeout(() => {
      providerQueueFlags[prefix] = false;
      const icons2 = providerIconsToLoad[prefix];
      delete providerIconsToLoad[prefix];
      const api = getAPIModule(provider);
      if (!api) {
        err();
        return;
      }
      const params = api.prepare(provider, prefix, icons2);
      params.forEach((item) => {
        sendAPIQuery(provider, item, (data, error) => {
          const storage2 = getStorage(provider, prefix);
          if (typeof data !== "object") {
            if (error !== 404) {
              return;
            }
            const t = Date.now();
            item.icons.forEach((name) => {
              storage2.missing[name] = t;
            });
          } else {
            try {
              const parsed = addIconSet(storage2, data);
              if (!parsed.length) {
                return;
              }
              const pending = providerPendingIcons[prefix];
              parsed.forEach((name) => {
                delete pending[name];
              });
              if (cache.store) {
                cache.store(provider, data);
              }
            } catch (err2) {
              console.error(err2);
            }
          }
          loadedNewIcons(provider, prefix);
        });
      });
    });
  }
}
var loadIcons = (icons, callback) => {
  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
  const sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = true;
    if (callback) {
      setTimeout(() => {
        if (callCallback) {
          callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
        }
      });
    }
    return () => {
      callCallback = false;
    };
  }
  const newIcons = /* @__PURE__ */ Object.create(null);
  const sources = [];
  let lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    if (prefix === lastPrefix && provider === lastProvider) {
      return;
    }
    lastProvider = provider;
    lastPrefix = prefix;
    sources.push({
      provider,
      prefix
    });
    if (pendingIcons[provider] === void 0) {
      pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerPendingIcons = pendingIcons[provider];
    if (providerPendingIcons[prefix] === void 0) {
      providerPendingIcons[prefix] = /* @__PURE__ */ Object.create(null);
    }
    if (newIcons[provider] === void 0) {
      newIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerNewIcons = newIcons[provider];
    if (providerNewIcons[prefix] === void 0) {
      providerNewIcons[prefix] = [];
    }
  });
  const time = Date.now();
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    const pendingQueue = pendingIcons[provider][prefix];
    if (pendingQueue[name] === void 0) {
      pendingQueue[name] = time;
      newIcons[provider][prefix].push(name);
    }
  });
  sources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (newIcons[provider][prefix].length) {
      loadNewIcons(provider, prefix, newIcons[provider][prefix]);
    }
  });
  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
var cacheVersion = "iconify2";
var cachePrefix = "iconify";
var countKey = cachePrefix + "-count";
var versionKey = cachePrefix + "-version";
var hour = 36e5;
var cacheExpiration = 168;
var config = {
  local: true,
  session: true
};
var loaded = false;
var count = {
  local: 0,
  session: 0
};
var emptyList = {
  local: [],
  session: []
};
var _window = typeof window === "undefined" ? {} : window;
function getGlobal(key) {
  const attr = key + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length === "number") {
      return _window[attr];
    }
  } catch (err) {
  }
  config[key] = false;
  return null;
}
function setCount(storage2, key, value) {
  try {
    storage2.setItem(countKey, value.toString());
    count[key] = value;
    return true;
  } catch (err) {
    return false;
  }
}
function getCount(storage2) {
  const count2 = storage2.getItem(countKey);
  if (count2) {
    const total = parseInt(count2);
    return total ? total : 0;
  }
  return 0;
}
function initCache(storage2, key) {
  try {
    storage2.setItem(versionKey, cacheVersion);
  } catch (err) {
  }
  setCount(storage2, key, 0);
}
function destroyCache(storage2) {
  try {
    const total = getCount(storage2);
    for (let i = 0; i < total; i++) {
      storage2.removeItem(cachePrefix + i.toString());
    }
  } catch (err) {
  }
}
var loadCache = () => {
  if (loaded) {
    return;
  }
  loaded = true;
  const minTime = Math.floor(Date.now() / hour) - cacheExpiration;
  function load(key) {
    const func = getGlobal(key);
    if (!func) {
      return;
    }
    const getItem = (index) => {
      const name = cachePrefix + index.toString();
      const item = func.getItem(name);
      if (typeof item !== "string") {
        return false;
      }
      let valid = true;
      try {
        const data = JSON.parse(item);
        if (typeof data !== "object" || typeof data.cached !== "number" || data.cached < minTime || typeof data.provider !== "string" || typeof data.data !== "object" || typeof data.data.prefix !== "string") {
          valid = false;
        } else {
          const provider = data.provider;
          const prefix = data.data.prefix;
          const storage2 = getStorage(provider, prefix);
          valid = addIconSet(storage2, data.data).length > 0;
        }
      } catch (err) {
        valid = false;
      }
      if (!valid) {
        func.removeItem(name);
      }
      return valid;
    };
    try {
      const version = func.getItem(versionKey);
      if (version !== cacheVersion) {
        if (version) {
          destroyCache(func);
        }
        initCache(func, key);
        return;
      }
      let total = getCount(func);
      for (let i = total - 1; i >= 0; i--) {
        if (!getItem(i)) {
          if (i === total - 1) {
            total--;
          } else {
            emptyList[key].push(i);
          }
        }
      }
      setCount(func, key, total);
    } catch (err) {
    }
  }
  for (const key in config) {
    load(key);
  }
};
var storeCache = (provider, data) => {
  if (!loaded) {
    loadCache();
  }
  function store(key) {
    if (!config[key]) {
      return false;
    }
    const func = getGlobal(key);
    if (!func) {
      return false;
    }
    let index = emptyList[key].shift();
    if (index === void 0) {
      index = count[key];
      if (!setCount(func, key, index + 1)) {
        return false;
      }
    }
    try {
      const item = {
        cached: Math.floor(Date.now() / hour),
        provider,
        data
      };
      func.setItem(cachePrefix + index.toString(), JSON.stringify(item));
    } catch (err) {
      return false;
    }
    return true;
  }
  if (!Object.keys(data.icons).length) {
    return;
  }
  if (data.not_found) {
    data = Object.assign({}, data);
    delete data.not_found;
  }
  if (!store("local")) {
    store("session");
  }
};
var separator = /[\s,]+/;
function flipFromString(custom, flip) {
  flip.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "horizontal":
        custom.hFlip = true;
        break;
      case "vertical":
        custom.vFlip = true;
        break;
    }
  });
}
function alignmentFromString(custom, align) {
  align.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "left":
      case "center":
      case "right":
        custom.hAlign = value;
        break;
      case "top":
      case "middle":
      case "bottom":
        custom.vAlign = value;
        break;
      case "slice":
      case "crop":
        custom.slice = true;
        break;
      case "meet":
        custom.slice = false;
    }
  });
}
function rotateFromString(value, defaultValue = 0) {
  const units = value.replace(/^-?[0-9.]*/, "");
  function cleanup(value2) {
    while (value2 < 0) {
      value2 += 4;
    }
    return value2 % 4;
  }
  if (units === "") {
    const num = parseInt(value);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value.slice(0, value.length - units.length));
      if (isNaN(num)) {
        return 0;
      }
      num = num / split;
      return num % 1 === 0 ? cleanup(num) : 0;
    }
  }
  return defaultValue;
}
var svgDefaults = {
  "xmlns": "http://www.w3.org/2000/svg",
  "xmlnsXlink": "http://www.w3.org/1999/xlink",
  "aria-hidden": true,
  "role": "img",
  "style": {}
  // Include style if it isn't set to add verticalAlign later
};
var inlineDefaults = { ...defaults, inline: true };
var render = (icon, props, inline, ref) => {
  const defaultProps = inline ? inlineDefaults : defaults;
  const customisations = mergeCustomisations(defaultProps, props);
  const style = typeof props.style === "object" && props.style !== null ? props.style : {};
  const componentProps = { ...svgDefaults, ref, style };
  for (let key in props) {
    const value = props[key];
    if (value === void 0) {
      continue;
    }
    switch (key) {
      case "icon":
      case "style":
      case "children":
      case "onLoad":
      case "_ref":
      case "_inline":
        break;
      case "inline":
      case "hFlip":
      case "vFlip":
        customisations[key] = value === true || value === "true" || value === 1;
        break;
      case "flip":
        if (typeof value === "string") {
          flipFromString(customisations, value);
        }
        break;
      case "align":
        if (typeof value === "string") {
          alignmentFromString(customisations, value);
        }
        break;
      case "color":
        style.color = value;
        break;
      case "rotate":
        if (typeof value === "string") {
          customisations[key] = rotateFromString(value);
        } else if (typeof value === "number") {
          customisations[key] = value;
        }
        break;
      case "ariaHidden":
      case "aria-hidden":
        if (value !== true && value !== "true") {
          delete componentProps["aria-hidden"];
        }
        break;
      default:
        if (defaultProps[key] === void 0) {
          componentProps[key] = value;
        }
    }
  }
  const item = iconToSVG(icon, customisations);
  let localCounter = 0;
  let id = props.id;
  if (typeof id === "string") {
    id = id.replace(/-/g, "_");
  }
  componentProps.dangerouslySetInnerHTML = {
    __html: replaceIDs(item.body, id ? () => id + "ID" + localCounter++ : "iconifyReact")
  };
  for (let key in item.attributes) {
    componentProps[key] = item.attributes[key];
  }
  if (item.inline && style.verticalAlign === void 0) {
    style.verticalAlign = "-0.125em";
  }
  return import_react.default.createElement("svg", componentProps);
};
allowSimpleNames(true);
setAPIModule("", fetchAPIModule);
if (typeof document !== "undefined" && typeof window !== "undefined") {
  cache.store = storeCache;
  loadCache();
  const _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    const preload = _window2.IconifyPreload;
    const err = "Invalid IconifyPreload syntax.";
    if (typeof preload === "object" && preload !== null) {
      (preload instanceof Array ? preload : [preload]).forEach((item) => {
        try {
          if (
            // Check if item is an object and not null/array
            typeof item !== "object" || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
            typeof item.icons !== "object" || typeof item.prefix !== "string" || // Add icon set
            !addCollection(item)
          ) {
            console.error(err);
          }
        } catch (e) {
          console.error(err);
        }
      });
    }
  }
  if (_window2.IconifyProviders !== void 0) {
    const providers = _window2.IconifyProviders;
    if (typeof providers === "object" && providers !== null) {
      for (let key in providers) {
        const err = "IconifyProviders[" + key + "] is invalid.";
        try {
          const value = providers[key];
          if (typeof value !== "object" || !value || value.resources === void 0) {
            continue;
          }
          if (!addAPIProvider(key, value)) {
            console.error(err);
          }
        } catch (e) {
          console.error(err);
        }
      }
    }
  }
}
var IconComponent = class extends import_react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      // Render placeholder before component is mounted
      icon: null
    };
  }
  /**
   * Abort loading icon
   */
  _abortLoading() {
    if (this._loading) {
      this._loading.abort();
      this._loading = null;
    }
  }
  /**
   * Update state
   */
  _setData(icon) {
    if (this.state.icon !== icon) {
      this.setState({
        icon
      });
    }
  }
  /**
   * Check if icon should be loaded
   */
  _checkIcon(changed) {
    const state = this.state;
    const icon = this.props.icon;
    if (typeof icon === "object" && icon !== null && typeof icon.body === "string") {
      this._icon = "";
      this._abortLoading();
      if (changed || state.icon === null) {
        this._setData({
          data: fullIcon(icon)
        });
      }
      return;
    }
    let iconName;
    if (typeof icon !== "string" || (iconName = stringToIcon(icon, false, true)) === null) {
      this._abortLoading();
      this._setData(null);
      return;
    }
    const data = getIconData(iconName);
    if (data === null) {
      if (!this._loading || this._loading.name !== icon) {
        this._abortLoading();
        this._icon = "";
        this._setData(null);
        this._loading = {
          name: icon,
          abort: loadIcons([iconName], this._checkIcon.bind(this, false))
        };
      }
      return;
    }
    if (this._icon !== icon || state.icon === null) {
      this._abortLoading();
      this._icon = icon;
      const classes = ["iconify"];
      if (iconName.prefix !== "") {
        classes.push("iconify--" + iconName.prefix);
      }
      if (iconName.provider !== "") {
        classes.push("iconify--" + iconName.provider);
      }
      this._setData({
        data,
        classes
      });
      if (this.props.onLoad) {
        this.props.onLoad(icon);
      }
    }
  }
  /**
   * Component mounted
   */
  componentDidMount() {
    this._checkIcon(false);
  }
  /**
   * Component updated
   */
  componentDidUpdate(oldProps) {
    if (oldProps.icon !== this.props.icon) {
      this._checkIcon(true);
    }
  }
  /**
   * Abort loading
   */
  componentWillUnmount() {
    this._abortLoading();
  }
  /**
   * Render
   */
  render() {
    const props = this.props;
    const icon = this.state.icon;
    if (icon === null) {
      return props.children ? props.children : import_react.default.createElement("span", {});
    }
    let newProps = props;
    if (icon.classes) {
      newProps = {
        ...props,
        className: (typeof props.className === "string" ? props.className + " " : "") + icon.classes.join(" ")
      };
    }
    return render(icon.data, newProps, props._inline, props._ref);
  }
};
var Icon = import_react.default.forwardRef(function Icon2(props, ref) {
  const newProps = {
    ...props,
    _ref: ref,
    _inline: false
  };
  return import_react.default.createElement(IconComponent, newProps);
});
var InlineIcon = import_react.default.forwardRef(function InlineIcon2(props, ref) {
  const newProps = { ...props, _ref: ref, _inline: true };
  return import_react.default.createElement(IconComponent, newProps);
});

// node_modules/react-h5-audio-player/es/index.js
var import_play_circle = __toESM(require_play_circle());
var import_pause_circle = __toESM(require_pause_circle());
var import_skip_previous = __toESM(require_skip_previous());
var import_skip_next = __toESM(require_skip_next());
var import_fast_forward = __toESM(require_fast_forward());
var import_rewind = __toESM(require_rewind());
var import_volume_high = __toESM(require_volume_high());
var import_volume_mute = __toESM(require_volume_mute());
var import_repeat = __toESM(require_repeat());
var import_repeat_off = __toESM(require_repeat_off());

// node_modules/react-h5-audio-player/es/ProgressBar.js
var import_react2 = __toESM(require_react());

// node_modules/react-h5-audio-player/es/utils.js
var getMainLayoutClassName = function getMainLayoutClassName2(layout) {
  switch (layout) {
    case "stacked":
      return "rhap_stacked";
    case "stacked-reverse":
      return "rhap_stacked-reverse";
    case "horizontal":
      return "rhap_horizontal";
    case "horizontal-reverse":
      return "rhap_horizontal-reverse";
    default:
      return "rhap_stacked";
  }
};
var getPosX = function getPosX2(event) {
  if (event instanceof MouseEvent) {
    return event.clientX;
  } else {
    return event.touches[0].clientX;
  }
};
var addHeadingZero = function addHeadingZero2(num) {
  return num > 9 ? num.toString() : "0".concat(num);
};
var getDisplayTimeBySeconds = function getDisplayTimeBySeconds2(seconds, totalSeconds, timeFormat) {
  if (!isFinite(seconds)) {
    return null;
  }
  var min = Math.floor(seconds / 60);
  var minStr = addHeadingZero(min);
  var secStr = addHeadingZero(Math.floor(seconds % 60));
  var minStrForHour = addHeadingZero(Math.floor(min % 60));
  var hourStr = Math.floor(min / 60);
  var mmSs = "".concat(minStr, ":").concat(secStr);
  var hhMmSs = "".concat(hourStr, ":").concat(minStrForHour, ":").concat(secStr);
  if (timeFormat === "auto") {
    if (totalSeconds >= 3600) {
      return hhMmSs;
    } else {
      return mmSs;
    }
  } else if (timeFormat === "mm:ss") {
    return mmSs;
  } else if (timeFormat === "hh:mm:ss") {
    return hhMmSs;
  }
};
function throttle(func, limit) {
  var inThrottle = false;
  return function(arg) {
    if (!inThrottle) {
      func(arg);
      inThrottle = true;
      setTimeout(function() {
        return inThrottle = false;
      }, limit);
    }
  };
}

// node_modules/react-h5-audio-player/es/ProgressBar.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ProgressBar = function(_Component) {
  _inherits(ProgressBar2, _Component);
  var _super = _createSuper(ProgressBar2);
  function ProgressBar2() {
    var _this;
    _classCallCheck(this, ProgressBar2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "audio", void 0);
    _defineProperty(_assertThisInitialized(_this), "timeOnMouseMove", 0);
    _defineProperty(_assertThisInitialized(_this), "hasAddedAudioEventListener", false);
    _defineProperty(_assertThisInitialized(_this), "downloadProgressAnimationTimer", void 0);
    _defineProperty(_assertThisInitialized(_this), "state", {
      isDraggingProgress: false,
      currentTimePos: "0%",
      hasDownloadProgressAnimation: false,
      downloadProgressArr: [],
      waitingForSeekCallback: false
    });
    _defineProperty(_assertThisInitialized(_this), "getCurrentProgress", function(event) {
      var _this$props = _this.props, audio = _this$props.audio, progressBar = _this$props.progressBar;
      var isSingleFileProgressiveDownload = audio.src.indexOf("blob:") !== 0 && typeof _this.props.srcDuration === "undefined";
      if (isSingleFileProgressiveDownload && (!audio.src || !isFinite(audio.currentTime) || !progressBar.current)) {
        return {
          currentTime: 0,
          currentTimePos: "0%"
        };
      }
      var progressBarRect = progressBar.current.getBoundingClientRect();
      var maxRelativePos = progressBarRect.width;
      var relativePos = getPosX(event) - progressBarRect.left;
      if (relativePos < 0) {
        relativePos = 0;
      } else if (relativePos > maxRelativePos) {
        relativePos = maxRelativePos;
      }
      var duration = _this.getDuration();
      var currentTime = duration * relativePos / maxRelativePos;
      return {
        currentTime,
        currentTimePos: "".concat((relativePos / maxRelativePos * 100).toFixed(2), "%")
      };
    });
    _defineProperty(_assertThisInitialized(_this), "handleContextMenu", function(event) {
      event.preventDefault();
    });
    _defineProperty(_assertThisInitialized(_this), "handleMouseDownOrTouchStartProgressBar", function(event) {
      event.stopPropagation();
      var _this$getCurrentProgr = _this.getCurrentProgress(event.nativeEvent), currentTime = _this$getCurrentProgr.currentTime, currentTimePos = _this$getCurrentProgr.currentTimePos;
      if (isFinite(currentTime)) {
        _this.timeOnMouseMove = currentTime;
        _this.setState({
          isDraggingProgress: true,
          currentTimePos
        });
        if (event.nativeEvent instanceof MouseEvent) {
          window.addEventListener("mousemove", _this.handleWindowMouseOrTouchMove);
          window.addEventListener("mouseup", _this.handleWindowMouseOrTouchUp);
        } else {
          window.addEventListener("touchmove", _this.handleWindowMouseOrTouchMove);
          window.addEventListener("touchend", _this.handleWindowMouseOrTouchUp);
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleWindowMouseOrTouchMove", function(event) {
      if (event instanceof MouseEvent) {
        event.preventDefault();
      }
      event.stopPropagation();
      var windowSelection = window.getSelection();
      if (windowSelection && windowSelection.type === "Range") {
        windowSelection.empty();
      }
      var isDraggingProgress = _this.state.isDraggingProgress;
      if (isDraggingProgress) {
        var _this$getCurrentProgr2 = _this.getCurrentProgress(event), currentTime = _this$getCurrentProgr2.currentTime, currentTimePos = _this$getCurrentProgr2.currentTimePos;
        _this.timeOnMouseMove = currentTime;
        _this.setState({
          currentTimePos
        });
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleWindowMouseOrTouchUp", function(event) {
      event.stopPropagation();
      var newTime = _this.timeOnMouseMove;
      var _this$props2 = _this.props, audio = _this$props2.audio, onChangeCurrentTimeError = _this$props2.onChangeCurrentTimeError, onSeek = _this$props2.onSeek;
      if (onSeek) {
        _this.setState({
          isDraggingProgress: false,
          waitingForSeekCallback: true
        }, function() {
          onSeek(audio, newTime).then(function() {
            return _this.setState({
              waitingForSeekCallback: false
            });
          }, function(err) {
            throw new Error(err);
          });
        });
      } else {
        var newProps = {
          isDraggingProgress: false
        };
        if (audio.readyState === audio.HAVE_NOTHING || audio.readyState === audio.HAVE_METADATA || !isFinite(newTime)) {
          newProps.currentTimePos = "0%";
          onChangeCurrentTimeError && onChangeCurrentTimeError();
        } else {
          audio.currentTime = newTime;
        }
        _this.setState(newProps);
      }
      if (event instanceof MouseEvent) {
        window.removeEventListener("mousemove", _this.handleWindowMouseOrTouchMove);
        window.removeEventListener("mouseup", _this.handleWindowMouseOrTouchUp);
      } else {
        window.removeEventListener("touchmove", _this.handleWindowMouseOrTouchMove);
        window.removeEventListener("touchend", _this.handleWindowMouseOrTouchUp);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleAudioTimeUpdate", throttle(function(e) {
      var isDraggingProgress = _this.state.isDraggingProgress;
      var audio = e.target;
      if (isDraggingProgress || _this.state.waitingForSeekCallback === true)
        return;
      var currentTime = audio.currentTime;
      var duration = _this.getDuration();
      _this.setState({
        currentTimePos: "".concat((currentTime / duration * 100 || 0).toFixed(2), "%")
      });
    }, _this.props.progressUpdateInterval));
    _defineProperty(_assertThisInitialized(_this), "handleAudioDownloadProgressUpdate", function(e) {
      var audio = e.target;
      var duration = _this.getDuration();
      var downloadProgressArr = [];
      for (var i = 0; i < audio.buffered.length; i++) {
        var bufferedStart = audio.buffered.start(i);
        var bufferedEnd = audio.buffered.end(i);
        downloadProgressArr.push({
          left: "".concat(Math.round(100 / duration * bufferedStart) || 0, "%"),
          width: "".concat(Math.round(100 / duration * (bufferedEnd - bufferedStart)) || 0, "%")
        });
      }
      clearTimeout(_this.downloadProgressAnimationTimer);
      _this.setState({
        downloadProgressArr,
        hasDownloadProgressAnimation: true
      });
      _this.downloadProgressAnimationTimer = setTimeout(function() {
        _this.setState({
          hasDownloadProgressAnimation: false
        });
      }, 200);
    });
    return _this;
  }
  _createClass(ProgressBar2, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$props3 = this.props, audio = _this$props3.audio, srcDuration = _this$props3.srcDuration;
      return typeof srcDuration === "undefined" ? audio.duration : srcDuration;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var audio = this.props.audio;
      if (audio && !this.hasAddedAudioEventListener) {
        this.audio = audio;
        this.hasAddedAudioEventListener = true;
        audio.addEventListener("timeupdate", this.handleAudioTimeUpdate);
        audio.addEventListener("progress", this.handleAudioDownloadProgressUpdate);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.audio && this.hasAddedAudioEventListener) {
        this.audio.removeEventListener("timeupdate", this.handleAudioTimeUpdate);
        this.audio.removeEventListener("progress", this.handleAudioDownloadProgressUpdate);
      }
      clearTimeout(this.downloadProgressAnimationTimer);
    }
  }, {
    key: "render",
    value: function render2() {
      var _this$props4 = this.props, showDownloadProgress = _this$props4.showDownloadProgress, showFilledProgress = _this$props4.showFilledProgress, progressBar = _this$props4.progressBar, i18nProgressBar = _this$props4.i18nProgressBar;
      var _this$state = this.state, currentTimePos = _this$state.currentTimePos, downloadProgressArr = _this$state.downloadProgressArr, hasDownloadProgressAnimation = _this$state.hasDownloadProgressAnimation;
      return import_react2.default.createElement("div", {
        className: "rhap_progress-container",
        ref: progressBar,
        "aria-label": i18nProgressBar,
        role: "progressbar",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": Number(currentTimePos.split("%")[0]),
        tabIndex: 0,
        onMouseDown: this.handleMouseDownOrTouchStartProgressBar,
        onTouchStart: this.handleMouseDownOrTouchStartProgressBar,
        onContextMenu: this.handleContextMenu
      }, import_react2.default.createElement("div", {
        className: "rhap_progress-bar ".concat(showDownloadProgress ? "rhap_progress-bar-show-download" : "")
      }, import_react2.default.createElement("div", {
        className: "rhap_progress-indicator",
        style: {
          left: currentTimePos
        }
      }), showFilledProgress && import_react2.default.createElement("div", {
        className: "rhap_progress-filled",
        style: {
          width: currentTimePos
        }
      }), showDownloadProgress && downloadProgressArr.map(function(_ref, i) {
        var left = _ref.left, width = _ref.width;
        return import_react2.default.createElement("div", {
          key: i,
          className: "rhap_download-progress",
          style: {
            left,
            width,
            transitionDuration: hasDownloadProgressAnimation ? ".2s" : "0s"
          }
        });
      })));
    }
  }]);
  return ProgressBar2;
}(import_react2.Component);
var ProgressBarForwardRef = function ProgressBarForwardRef2(props, ref) {
  return import_react2.default.createElement(ProgressBar, _extends({}, props, {
    progressBar: ref
  }));
};
var ProgressBar_default = (0, import_react2.forwardRef)(ProgressBarForwardRef);

// node_modules/react-h5-audio-player/es/CurrentTime.js
var import_react3 = __toESM(require_react());
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CurrentTime = function(_PureComponent) {
  _inherits(CurrentTime2, _PureComponent);
  var _super = _createSuper2(CurrentTime2);
  function CurrentTime2(props) {
    var _this;
    _classCallCheck(this, CurrentTime2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "audio", void 0);
    _defineProperty(_assertThisInitialized(_this), "hasAddedAudioEventListener", false);
    _defineProperty(_assertThisInitialized(_this), "state", {
      currentTime: _this.props.defaultCurrentTime
    });
    _defineProperty(_assertThisInitialized(_this), "handleAudioCurrentTimeChange", function(e) {
      var audio = e.target;
      var _this$props = _this.props, isLeftTime = _this$props.isLeftTime, timeFormat = _this$props.timeFormat, defaultCurrentTime = _this$props.defaultCurrentTime;
      _this.setState({
        currentTime: getDisplayTimeBySeconds(isLeftTime ? audio.duration - audio.currentTime : audio.currentTime, audio.duration, timeFormat) || defaultCurrentTime
      });
    });
    _defineProperty(_assertThisInitialized(_this), "addAudioEventListeners", function() {
      var audio = _this.props.audio;
      if (audio && !_this.hasAddedAudioEventListener) {
        _this.audio = audio;
        _this.hasAddedAudioEventListener = true;
        audio.addEventListener("timeupdate", _this.handleAudioCurrentTimeChange);
        audio.addEventListener("loadedmetadata", _this.handleAudioCurrentTimeChange);
      }
    });
    var _audio = props.audio, _defaultCurrentTime = props.defaultCurrentTime, _isLeftTime = props.isLeftTime, _timeFormat = props.timeFormat;
    var currentTime = _defaultCurrentTime;
    if (_audio) {
      currentTime = getDisplayTimeBySeconds(_isLeftTime ? _audio.duration - _audio.currentTime : _audio.currentTime, _audio.duration, _timeFormat);
    }
    _this.state = {
      currentTime
    };
    return _this;
  }
  _createClass(CurrentTime2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.addAudioEventListeners();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.addAudioEventListeners();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.audio && this.hasAddedAudioEventListener) {
        this.audio.removeEventListener("timeupdate", this.handleAudioCurrentTimeChange);
        this.audio.removeEventListener("loadedmetadata", this.handleAudioCurrentTimeChange);
      }
    }
  }, {
    key: "render",
    value: function render2() {
      return this.state.currentTime;
    }
  }]);
  return CurrentTime2;
}(import_react3.PureComponent);
var CurrentTime_default = CurrentTime;

// node_modules/react-h5-audio-player/es/Duration.js
var import_react4 = __toESM(require_react());
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Duration = function(_PureComponent) {
  _inherits(Duration2, _PureComponent);
  var _super = _createSuper3(Duration2);
  function Duration2(props) {
    var _this;
    _classCallCheck(this, Duration2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "audio", void 0);
    _defineProperty(_assertThisInitialized(_this), "hasAddedAudioEventListener", false);
    _defineProperty(_assertThisInitialized(_this), "state", {
      duration: _this.props.audio ? getDisplayTimeBySeconds(_this.props.audio.duration, _this.props.audio.duration, _this.props.timeFormat) : _this.props.defaultDuration
    });
    _defineProperty(_assertThisInitialized(_this), "handleAudioDurationChange", function(e) {
      var audio = e.target;
      var _this$props = _this.props, timeFormat = _this$props.timeFormat, defaultDuration = _this$props.defaultDuration;
      _this.setState({
        duration: getDisplayTimeBySeconds(audio.duration, audio.duration, timeFormat) || defaultDuration
      });
    });
    _defineProperty(_assertThisInitialized(_this), "addAudioEventListeners", function() {
      var audio = _this.props.audio;
      if (audio && !_this.hasAddedAudioEventListener) {
        _this.audio = audio;
        _this.hasAddedAudioEventListener = true;
        audio.addEventListener("durationchange", _this.handleAudioDurationChange);
        audio.addEventListener("abort", _this.handleAudioDurationChange);
      }
    });
    var _audio = props.audio, _timeFormat = props.timeFormat, _defaultDuration = props.defaultDuration;
    _this.state = {
      duration: _audio ? getDisplayTimeBySeconds(_audio.duration, _audio.duration, _timeFormat) : _defaultDuration
    };
    return _this;
  }
  _createClass(Duration2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.addAudioEventListeners();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.addAudioEventListeners();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.audio && this.hasAddedAudioEventListener) {
        this.audio.removeEventListener("durationchange", this.handleAudioDurationChange);
        this.audio.removeEventListener("abort", this.handleAudioDurationChange);
      }
    }
  }, {
    key: "render",
    value: function render2() {
      return this.state.duration;
    }
  }]);
  return Duration2;
}(import_react4.PureComponent);
var Duration_default = Duration;

// node_modules/react-h5-audio-player/es/VolumeBar.js
var import_react5 = __toESM(require_react());
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var VolumeControls = function(_Component) {
  _inherits(VolumeControls2, _Component);
  var _super = _createSuper4(VolumeControls2);
  function VolumeControls2() {
    var _this;
    _classCallCheck(this, VolumeControls2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "audio", void 0);
    _defineProperty(_assertThisInitialized(_this), "hasAddedAudioEventListener", false);
    _defineProperty(_assertThisInitialized(_this), "volumeBar", (0, import_react5.createRef)());
    _defineProperty(_assertThisInitialized(_this), "volumeAnimationTimer", 0);
    _defineProperty(_assertThisInitialized(_this), "lastVolume", _this.props.volume);
    _defineProperty(_assertThisInitialized(_this), "state", {
      currentVolumePos: "".concat((_this.lastVolume / 1 * 100 || 0).toFixed(2), "%"),
      hasVolumeAnimation: false,
      isDraggingVolume: false
    });
    _defineProperty(_assertThisInitialized(_this), "getCurrentVolume", function(event) {
      var audio = _this.props.audio;
      if (!_this.volumeBar.current) {
        return {
          currentVolume: audio.volume,
          currentVolumePos: _this.state.currentVolumePos
        };
      }
      var volumeBarRect = _this.volumeBar.current.getBoundingClientRect();
      var maxRelativePos = volumeBarRect.width;
      var relativePos = getPosX(event) - volumeBarRect.left;
      var currentVolume;
      var currentVolumePos;
      if (relativePos < 0) {
        currentVolume = 0;
        currentVolumePos = "0%";
      } else if (relativePos > volumeBarRect.width) {
        currentVolume = 1;
        currentVolumePos = "100%";
      } else {
        currentVolume = relativePos / maxRelativePos;
        currentVolumePos = "".concat(relativePos / maxRelativePos * 100, "%");
      }
      return {
        currentVolume,
        currentVolumePos
      };
    });
    _defineProperty(_assertThisInitialized(_this), "handleContextMenu", function(event) {
      event.preventDefault();
    });
    _defineProperty(_assertThisInitialized(_this), "handleClickVolumeButton", function() {
      var audio = _this.props.audio;
      if (audio.volume > 0) {
        _this.lastVolume = audio.volume;
        audio.volume = 0;
      } else {
        audio.volume = _this.lastVolume;
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleVolumnControlMouseOrTouchDown", function(event) {
      event.stopPropagation();
      var audio = _this.props.audio;
      var _this$getCurrentVolum = _this.getCurrentVolume(event.nativeEvent), currentVolume = _this$getCurrentVolum.currentVolume, currentVolumePos = _this$getCurrentVolum.currentVolumePos;
      audio.volume = currentVolume;
      _this.setState({
        isDraggingVolume: true,
        currentVolumePos
      });
      if (event.nativeEvent instanceof MouseEvent) {
        window.addEventListener("mousemove", _this.handleWindowMouseOrTouchMove);
        window.addEventListener("mouseup", _this.handleWindowMouseOrTouchUp);
      } else {
        window.addEventListener("touchmove", _this.handleWindowMouseOrTouchMove);
        window.addEventListener("touchend", _this.handleWindowMouseOrTouchUp);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleWindowMouseOrTouchMove", function(event) {
      if (event instanceof MouseEvent) {
        event.preventDefault();
      }
      event.stopPropagation();
      var audio = _this.props.audio;
      var windowSelection = window.getSelection();
      if (windowSelection && windowSelection.type === "Range") {
        windowSelection.empty();
      }
      var isDraggingVolume = _this.state.isDraggingVolume;
      if (isDraggingVolume) {
        var _this$getCurrentVolum2 = _this.getCurrentVolume(event), currentVolume = _this$getCurrentVolum2.currentVolume, currentVolumePos = _this$getCurrentVolum2.currentVolumePos;
        audio.volume = currentVolume;
        _this.setState({
          currentVolumePos
        });
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleWindowMouseOrTouchUp", function(event) {
      event.stopPropagation();
      _this.setState({
        isDraggingVolume: false
      });
      if (event instanceof MouseEvent) {
        window.removeEventListener("mousemove", _this.handleWindowMouseOrTouchMove);
        window.removeEventListener("mouseup", _this.handleWindowMouseOrTouchUp);
      } else {
        window.removeEventListener("touchmove", _this.handleWindowMouseOrTouchMove);
        window.removeEventListener("touchend", _this.handleWindowMouseOrTouchUp);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleAudioVolumeChange", function(e) {
      var isDraggingVolume = _this.state.isDraggingVolume;
      var _ref = e.target, volume = _ref.volume;
      if (_this.lastVolume > 0 && volume === 0 || _this.lastVolume === 0 && volume > 0) {
        _this.props.onMuteChange();
      }
      _this.lastVolume = volume;
      if (isDraggingVolume)
        return;
      _this.setState({
        hasVolumeAnimation: true,
        currentVolumePos: "".concat((volume / 1 * 100 || 0).toFixed(2), "%")
      });
      clearTimeout(_this.volumeAnimationTimer);
      _this.volumeAnimationTimer = setTimeout(function() {
        _this.setState({
          hasVolumeAnimation: false
        });
      }, 100);
    });
    return _this;
  }
  _createClass(VolumeControls2, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var audio = this.props.audio;
      if (audio && !this.hasAddedAudioEventListener) {
        this.audio = audio;
        this.hasAddedAudioEventListener = true;
        audio.addEventListener("volumechange", this.handleAudioVolumeChange);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.audio && this.hasAddedAudioEventListener) {
        this.audio.removeEventListener("volumechange", this.handleAudioVolumeChange);
      }
      clearTimeout(this.volumeAnimationTimer);
    }
  }, {
    key: "render",
    value: function render2() {
      var _this$props = this.props, audio = _this$props.audio, showFilledVolume = _this$props.showFilledVolume, i18nVolumeControl = _this$props.i18nVolumeControl;
      var _this$state = this.state, currentVolumePos = _this$state.currentVolumePos, hasVolumeAnimation = _this$state.hasVolumeAnimation;
      var _ref2 = audio || {}, volume = _ref2.volume;
      return import_react5.default.createElement("div", {
        ref: this.volumeBar,
        onMouseDown: this.handleVolumnControlMouseOrTouchDown,
        onTouchStart: this.handleVolumnControlMouseOrTouchDown,
        onContextMenu: this.handleContextMenu,
        role: "progressbar",
        "aria-label": i18nVolumeControl,
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": Number((volume * 100).toFixed(0)),
        tabIndex: 0,
        className: "rhap_volume-bar-area"
      }, import_react5.default.createElement("div", {
        className: "rhap_volume-bar"
      }, import_react5.default.createElement("div", {
        className: "rhap_volume-indicator",
        style: {
          left: currentVolumePos,
          transitionDuration: hasVolumeAnimation ? ".1s" : "0s"
        }
      }), showFilledVolume && import_react5.default.createElement("div", {
        className: "rhap_volume-filled",
        style: {
          width: currentVolumePos
        }
      })));
    }
  }]);
  return VolumeControls2;
}(import_react5.Component);
var VolumeBar_default = VolumeControls;

// node_modules/react-h5-audio-player/es/constants.js
var RHAP_UI;
(function(RHAP_UI2) {
  RHAP_UI2["CURRENT_TIME"] = "CURRENT_TIME";
  RHAP_UI2["CURRENT_LEFT_TIME"] = "CURRENT_LEFT_TIME";
  RHAP_UI2["PROGRESS_BAR"] = "PROGRESS_BAR";
  RHAP_UI2["DURATION"] = "DURATION";
  RHAP_UI2["ADDITIONAL_CONTROLS"] = "ADDITIONAL_CONTROLS";
  RHAP_UI2["MAIN_CONTROLS"] = "MAIN_CONTROLS";
  RHAP_UI2["VOLUME_CONTROLS"] = "VOLUME_CONTROLS";
  RHAP_UI2["LOOP"] = "LOOP";
  RHAP_UI2["VOLUME"] = "VOLUME";
})(RHAP_UI || (RHAP_UI = {}));

// node_modules/react-h5-audio-player/es/index.js
function _createSuper5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var H5AudioPlayer = function(_Component) {
  _inherits(H5AudioPlayer2, _Component);
  var _super = _createSuper5(H5AudioPlayer2);
  function H5AudioPlayer2() {
    var _this;
    _classCallCheck(this, H5AudioPlayer2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "audio", (0, import_react6.createRef)());
    _defineProperty(_assertThisInitialized(_this), "progressBar", (0, import_react6.createRef)());
    _defineProperty(_assertThisInitialized(_this), "container", (0, import_react6.createRef)());
    _defineProperty(_assertThisInitialized(_this), "lastVolume", _this.props.volume);
    _defineProperty(_assertThisInitialized(_this), "listenTracker", void 0);
    _defineProperty(_assertThisInitialized(_this), "volumeAnimationTimer", void 0);
    _defineProperty(_assertThisInitialized(_this), "downloadProgressAnimationTimer", void 0);
    _defineProperty(_assertThisInitialized(_this), "togglePlay", function(e) {
      e.stopPropagation();
      var audio = _this.audio.current;
      if ((audio.paused || audio.ended) && audio.src) {
        _this.playAudioPromise();
      } else if (!audio.paused) {
        audio.pause();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "playAudioPromise", function() {
      var playPromise = _this.audio.current.play();
      if (playPromise) {
        playPromise.then(null).catch(function(err) {
          var onPlayError = _this.props.onPlayError;
          onPlayError && onPlayError(new Error(err));
        });
      } else {
        _this.forceUpdate();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "isPlaying", function() {
      var audio = _this.audio.current;
      if (!audio)
        return false;
      return !audio.paused && !audio.ended;
    });
    _defineProperty(_assertThisInitialized(_this), "handlePlay", function(e) {
      _this.forceUpdate();
      _this.props.onPlay && _this.props.onPlay(e);
    });
    _defineProperty(_assertThisInitialized(_this), "handlePause", function(e) {
      if (!_this.audio)
        return;
      _this.forceUpdate();
      _this.props.onPause && _this.props.onPause(e);
    });
    _defineProperty(_assertThisInitialized(_this), "handleEnded", function(e) {
      if (!_this.audio)
        return;
      _this.forceUpdate();
      _this.props.onEnded && _this.props.onEnded(e);
    });
    _defineProperty(_assertThisInitialized(_this), "handleAbort", function(e) {
      _this.props.onAbort && _this.props.onAbort(e);
    });
    _defineProperty(_assertThisInitialized(_this), "handleClickVolumeButton", function() {
      var audio = _this.audio.current;
      if (audio.volume > 0) {
        _this.lastVolume = audio.volume;
        audio.volume = 0;
      } else {
        audio.volume = _this.lastVolume;
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleMuteChange", function() {
      _this.forceUpdate();
    });
    _defineProperty(_assertThisInitialized(_this), "handleClickLoopButton", function() {
      _this.audio.current.loop = !_this.audio.current.loop;
      _this.forceUpdate();
    });
    _defineProperty(_assertThisInitialized(_this), "handleClickRewind", function() {
      var _this$props = _this.props, progressJumpSteps = _this$props.progressJumpSteps, progressJumpStep = _this$props.progressJumpStep;
      var jumpStep = progressJumpSteps.backward || progressJumpStep;
      _this.setJumpTime(-jumpStep);
    });
    _defineProperty(_assertThisInitialized(_this), "handleClickForward", function() {
      var _this$props2 = _this.props, progressJumpSteps = _this$props2.progressJumpSteps, progressJumpStep = _this$props2.progressJumpStep;
      var jumpStep = progressJumpSteps.forward || progressJumpStep;
      _this.setJumpTime(jumpStep);
    });
    _defineProperty(_assertThisInitialized(_this), "setJumpTime", function(time) {
      var audio = _this.audio.current;
      var duration = audio.duration, prevTime = audio.currentTime;
      if (audio.readyState === audio.HAVE_NOTHING || audio.readyState === audio.HAVE_METADATA || !isFinite(duration) || !isFinite(prevTime)) {
        return _this.props.onChangeCurrentTimeError && _this.props.onChangeCurrentTimeError();
      }
      var currentTime = prevTime + time / 1e3;
      if (currentTime < 0) {
        audio.currentTime = 0;
        currentTime = 0;
      } else if (currentTime > duration) {
        audio.currentTime = duration;
        currentTime = duration;
      } else {
        audio.currentTime = currentTime;
      }
    });
    _defineProperty(_assertThisInitialized(_this), "setJumpVolume", function(volume) {
      var newVolume = _this.audio.current.volume + volume;
      if (newVolume < 0)
        newVolume = 0;
      else if (newVolume > 1)
        newVolume = 1;
      _this.audio.current.volume = newVolume;
    });
    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function(e) {
      if (_this.props.hasDefaultKeyBindings) {
        switch (e.key) {
          case " ":
            if (e.target === _this.container.current || e.target === _this.progressBar.current) {
              e.preventDefault();
              _this.togglePlay(e);
            }
            break;
          case "ArrowLeft":
            _this.handleClickRewind();
            break;
          case "ArrowRight":
            _this.handleClickForward();
            break;
          case "ArrowUp":
            e.preventDefault();
            _this.setJumpVolume(_this.props.volumeJumpStep);
            break;
          case "ArrowDown":
            e.preventDefault();
            _this.setJumpVolume(-_this.props.volumeJumpStep);
            break;
          case "l":
            _this.handleClickLoopButton();
            break;
          case "m":
            _this.handleClickVolumeButton();
            break;
        }
      }
    });
    _defineProperty(_assertThisInitialized(_this), "renderUIModules", function(modules) {
      return modules.map(function(comp, i) {
        return _this.renderUIModule(comp, i);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "renderUIModule", function(comp, key) {
      var _this$props3 = _this.props, defaultCurrentTime = _this$props3.defaultCurrentTime, progressUpdateInterval = _this$props3.progressUpdateInterval, showDownloadProgress = _this$props3.showDownloadProgress, showFilledProgress = _this$props3.showFilledProgress, showFilledVolume = _this$props3.showFilledVolume, defaultDuration = _this$props3.defaultDuration, customIcons = _this$props3.customIcons, showSkipControls = _this$props3.showSkipControls, onClickPrevious = _this$props3.onClickPrevious, onClickNext = _this$props3.onClickNext, onChangeCurrentTimeError = _this$props3.onChangeCurrentTimeError, showJumpControls = _this$props3.showJumpControls, customAdditionalControls = _this$props3.customAdditionalControls, customVolumeControls = _this$props3.customVolumeControls, muted = _this$props3.muted, timeFormat = _this$props3.timeFormat, volumeProp = _this$props3.volume, loopProp = _this$props3.loop, mse = _this$props3.mse, i18nAriaLabels = _this$props3.i18nAriaLabels;
      switch (comp) {
        case RHAP_UI.CURRENT_TIME:
          return import_react6.default.createElement("div", {
            key,
            id: "rhap_current-time",
            className: "rhap_time rhap_current-time"
          }, import_react6.default.createElement(CurrentTime_default, {
            audio: _this.audio.current,
            isLeftTime: false,
            defaultCurrentTime,
            timeFormat
          }));
        case RHAP_UI.CURRENT_LEFT_TIME:
          return import_react6.default.createElement("div", {
            key,
            id: "rhap_current-left-time",
            className: "rhap_time rhap_current-left-time"
          }, import_react6.default.createElement(CurrentTime_default, {
            audio: _this.audio.current,
            isLeftTime: true,
            defaultCurrentTime,
            timeFormat
          }));
        case RHAP_UI.PROGRESS_BAR:
          return import_react6.default.createElement(ProgressBar_default, {
            key,
            ref: _this.progressBar,
            audio: _this.audio.current,
            progressUpdateInterval,
            showDownloadProgress,
            showFilledProgress,
            onSeek: mse && mse.onSeek,
            onChangeCurrentTimeError,
            srcDuration: mse && mse.srcDuration,
            i18nProgressBar: i18nAriaLabels.progressControl
          });
        case RHAP_UI.DURATION:
          return import_react6.default.createElement("div", {
            key,
            className: "rhap_time rhap_total-time"
          }, mse && mse.srcDuration ? getDisplayTimeBySeconds(mse.srcDuration, mse.srcDuration, _this.props.timeFormat) : import_react6.default.createElement(Duration_default, {
            audio: _this.audio.current,
            defaultDuration,
            timeFormat
          }));
        case RHAP_UI.ADDITIONAL_CONTROLS:
          return import_react6.default.createElement("div", {
            key,
            className: "rhap_additional-controls"
          }, _this.renderUIModules(customAdditionalControls));
        case RHAP_UI.MAIN_CONTROLS: {
          var isPlaying = _this.isPlaying();
          var actionIcon;
          if (isPlaying) {
            actionIcon = customIcons.pause ? customIcons.pause : import_react6.default.createElement(Icon, {
              icon: import_pause_circle.default
            });
          } else {
            actionIcon = customIcons.play ? customIcons.play : import_react6.default.createElement(Icon, {
              icon: import_play_circle.default
            });
          }
          return import_react6.default.createElement("div", {
            key,
            className: "rhap_main-controls"
          }, showSkipControls && import_react6.default.createElement("button", {
            "aria-label": i18nAriaLabels.previous,
            className: "rhap_button-clear rhap_main-controls-button rhap_skip-button",
            type: "button",
            onClick: onClickPrevious
          }, customIcons.previous ? customIcons.previous : import_react6.default.createElement(Icon, {
            icon: import_skip_previous.default
          })), showJumpControls && import_react6.default.createElement("button", {
            "aria-label": i18nAriaLabels.rewind,
            className: "rhap_button-clear rhap_main-controls-button rhap_rewind-button",
            type: "button",
            onClick: _this.handleClickRewind
          }, customIcons.rewind ? customIcons.rewind : import_react6.default.createElement(Icon, {
            icon: import_rewind.default
          })), import_react6.default.createElement("button", {
            "aria-label": isPlaying ? i18nAriaLabels.pause : i18nAriaLabels.play,
            className: "rhap_button-clear rhap_main-controls-button rhap_play-pause-button",
            type: "button",
            onClick: _this.togglePlay
          }, actionIcon), showJumpControls && import_react6.default.createElement("button", {
            "aria-label": i18nAriaLabels.forward,
            className: "rhap_button-clear rhap_main-controls-button rhap_forward-button",
            type: "button",
            onClick: _this.handleClickForward
          }, customIcons.forward ? customIcons.forward : import_react6.default.createElement(Icon, {
            icon: import_fast_forward.default
          })), showSkipControls && import_react6.default.createElement("button", {
            "aria-label": i18nAriaLabels.next,
            className: "rhap_button-clear rhap_main-controls-button rhap_skip-button",
            type: "button",
            onClick: onClickNext
          }, customIcons.next ? customIcons.next : import_react6.default.createElement(Icon, {
            icon: import_skip_next.default
          })));
        }
        case RHAP_UI.VOLUME_CONTROLS:
          return import_react6.default.createElement("div", {
            key,
            className: "rhap_volume-controls"
          }, _this.renderUIModules(customVolumeControls));
        case RHAP_UI.LOOP: {
          var loop = _this.audio.current ? _this.audio.current.loop : loopProp;
          var loopIcon;
          if (loop) {
            loopIcon = customIcons.loop ? customIcons.loop : import_react6.default.createElement(Icon, {
              icon: import_repeat.default
            });
          } else {
            loopIcon = customIcons.loopOff ? customIcons.loopOff : import_react6.default.createElement(Icon, {
              icon: import_repeat_off.default
            });
          }
          return import_react6.default.createElement("button", {
            key,
            "aria-label": loop ? i18nAriaLabels.loop : i18nAriaLabels.loopOff,
            className: "rhap_button-clear rhap_repeat-button",
            type: "button",
            onClick: _this.handleClickLoopButton
          }, loopIcon);
        }
        case RHAP_UI.VOLUME: {
          var _ref = _this.audio.current || {}, _ref$volume = _ref.volume, volume = _ref$volume === void 0 ? muted ? 0 : volumeProp : _ref$volume;
          var volumeIcon;
          if (volume) {
            volumeIcon = customIcons.volume ? customIcons.volume : import_react6.default.createElement(Icon, {
              icon: import_volume_high.default
            });
          } else {
            volumeIcon = customIcons.volume ? customIcons.volumeMute : import_react6.default.createElement(Icon, {
              icon: import_volume_mute.default
            });
          }
          return import_react6.default.createElement("div", {
            key,
            className: "rhap_volume-container"
          }, import_react6.default.createElement("button", {
            "aria-label": volume ? i18nAriaLabels.volume : i18nAriaLabels.volumeMute,
            onClick: _this.handleClickVolumeButton,
            type: "button",
            className: "rhap_button-clear rhap_volume-button"
          }, volumeIcon), import_react6.default.createElement(VolumeBar_default, {
            audio: _this.audio.current,
            volume,
            onMuteChange: _this.handleMuteChange,
            showFilledVolume,
            i18nVolumeControl: i18nAriaLabels.volumeControl
          }));
        }
        default:
          if (!(0, import_react6.isValidElement)(comp)) {
            return null;
          }
          return comp.key ? comp : (0, import_react6.cloneElement)(comp, {
            key
          });
      }
    });
    return _this;
  }
  _createClass(H5AudioPlayer2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      this.forceUpdate();
      var audio = this.audio.current;
      if (this.props.muted) {
        audio.volume = 0;
      } else {
        audio.volume = this.lastVolume;
      }
      audio.addEventListener("error", function(e) {
        _this2.props.onError && _this2.props.onError(e);
      });
      audio.addEventListener("canplay", function(e) {
        _this2.props.onCanPlay && _this2.props.onCanPlay(e);
      });
      audio.addEventListener("canplaythrough", function(e) {
        _this2.props.onCanPlayThrough && _this2.props.onCanPlayThrough(e);
      });
      audio.addEventListener("play", this.handlePlay);
      audio.addEventListener("abort", this.handleAbort);
      audio.addEventListener("ended", this.handleEnded);
      audio.addEventListener("playing", function(e) {
        _this2.props.onPlaying && _this2.props.onPlaying(e);
      });
      audio.addEventListener("seeking", function(e) {
        _this2.props.onSeeking && _this2.props.onSeeking(e);
      });
      audio.addEventListener("seeked", function(e) {
        _this2.props.onSeeked && _this2.props.onSeeked(e);
      });
      audio.addEventListener("waiting", function(e) {
        _this2.props.onWaiting && _this2.props.onWaiting(e);
      });
      audio.addEventListener("emptied", function(e) {
        _this2.props.onEmptied && _this2.props.onEmptied(e);
      });
      audio.addEventListener("stalled", function(e) {
        _this2.props.onStalled && _this2.props.onStalled(e);
      });
      audio.addEventListener("suspend", function(e) {
        _this2.props.onSuspend && _this2.props.onSuspend(e);
      });
      audio.addEventListener("loadstart", function(e) {
        _this2.props.onLoadStart && _this2.props.onLoadStart(e);
      });
      audio.addEventListener("loadedmetadata", function(e) {
        _this2.props.onLoadedMetaData && _this2.props.onLoadedMetaData(e);
      });
      audio.addEventListener("loadeddata", function(e) {
        _this2.props.onLoadedData && _this2.props.onLoadedData(e);
      });
      audio.addEventListener("pause", this.handlePause);
      audio.addEventListener("timeupdate", throttle(function(e) {
        _this2.props.onListen && _this2.props.onListen(e);
      }, this.props.listenInterval));
      audio.addEventListener("volumechange", function(e) {
        _this2.props.onVolumeChange && _this2.props.onVolumeChange(e);
      });
      audio.addEventListener("encrypted", function(e) {
        var mse = _this2.props.mse;
        mse && mse.onEcrypted && mse.onEcrypted(e);
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props4 = this.props, src = _this$props4.src, autoPlayAfterSrcChange = _this$props4.autoPlayAfterSrcChange;
      if (prevProps.src !== src) {
        if (autoPlayAfterSrcChange) {
          this.playAudioPromise();
        } else {
          this.forceUpdate();
        }
      }
    }
  }, {
    key: "render",
    value: function render2() {
      var _this$props5 = this.props, className = _this$props5.className, src = _this$props5.src, loopProp = _this$props5.loop, preload = _this$props5.preload, autoPlay = _this$props5.autoPlay, crossOrigin = _this$props5.crossOrigin, mediaGroup = _this$props5.mediaGroup, header = _this$props5.header, footer = _this$props5.footer, layout = _this$props5.layout, customProgressBarSection = _this$props5.customProgressBarSection, customControlsSection = _this$props5.customControlsSection, children = _this$props5.children, style = _this$props5.style, i18nAriaLabels = _this$props5.i18nAriaLabels;
      var loop = this.audio.current ? this.audio.current.loop : loopProp;
      var loopClass = loop ? "rhap_loop--on" : "rhap_loop--off";
      var isPlayingClass = this.isPlaying() ? "rhap_play-status--playing" : "rhap_play-status--paused";
      return import_react6.default.createElement("div", {
        role: "group",
        tabIndex: 0,
        "aria-label": i18nAriaLabels.player,
        className: "rhap_container ".concat(loopClass, " ").concat(isPlayingClass, " ").concat(className),
        onKeyDown: this.handleKeyDown,
        ref: this.container,
        style
      }, import_react6.default.createElement("audio", {
        src,
        controls: false,
        loop,
        autoPlay,
        preload,
        crossOrigin,
        mediaGroup,
        ref: this.audio
      }, children), header && import_react6.default.createElement("div", {
        className: "rhap_header"
      }, header), import_react6.default.createElement("div", {
        className: "rhap_main ".concat(getMainLayoutClassName(layout))
      }, import_react6.default.createElement("div", {
        className: "rhap_progress-section"
      }, this.renderUIModules(customProgressBarSection)), import_react6.default.createElement("div", {
        className: "rhap_controls-section"
      }, this.renderUIModules(customControlsSection))), footer && import_react6.default.createElement("div", {
        className: "rhap_footer"
      }, footer));
    }
  }]);
  return H5AudioPlayer2;
}(import_react6.Component);
_defineProperty(H5AudioPlayer, "defaultProps", {
  autoPlay: false,
  autoPlayAfterSrcChange: true,
  listenInterval: 1e3,
  progressJumpStep: 5e3,
  progressJumpSteps: {},
  volumeJumpStep: 0.1,
  loop: false,
  muted: false,
  preload: "auto",
  progressUpdateInterval: 20,
  defaultCurrentTime: "--:--",
  defaultDuration: "--:--",
  timeFormat: "auto",
  volume: 1,
  className: "",
  showJumpControls: true,
  showSkipControls: false,
  showDownloadProgress: true,
  showFilledProgress: true,
  showFilledVolume: false,
  customIcons: {},
  customProgressBarSection: [RHAP_UI.CURRENT_TIME, RHAP_UI.PROGRESS_BAR, RHAP_UI.DURATION],
  customControlsSection: [RHAP_UI.ADDITIONAL_CONTROLS, RHAP_UI.MAIN_CONTROLS, RHAP_UI.VOLUME_CONTROLS],
  customAdditionalControls: [RHAP_UI.LOOP],
  customVolumeControls: [RHAP_UI.VOLUME],
  layout: "stacked",
  hasDefaultKeyBindings: true,
  i18nAriaLabels: {
    player: "Audio player",
    progressControl: "Audio progress control",
    volumeControl: "Volume control",
    play: "Play",
    pause: "Pause",
    rewind: "Rewind",
    forward: "Forward",
    previous: "Previous",
    next: "Skip",
    loop: "Disable loop",
    loopOff: "Enable loop",
    volume: "Mute",
    volumeMute: "Unmute"
  }
});
var es_default = H5AudioPlayer;
export {
  RHAP_UI,
  es_default as default
};
//# sourceMappingURL=react-h5-audio-player.js.map
